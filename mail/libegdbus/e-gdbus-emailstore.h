/*
 * Generated by gdbus-codegen.py 0.1. DO NOT EDIT.
 */

#ifndef __E_GDBUS_EMAILSTORE_H__
#define __E_GDBUS_EMAILSTORE_H__

#include <gio/gio.h>
#include <gdbusinterface.h>
#include <gdbusobjectproxy.h>
#include <gdbusproxymanager.h>
#include <gdbusobject.h>
#include <gdbusobjectmanager.h>
#include <gdbuscodegen-enumtypes.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.evolution.dataserver.mail.Store */

#define EGDBUS_STORE_TYPE_MS (egdbus_store_ms_get_gtype ())
#define EGDBUS_STORE_MS(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), EGDBUS_STORE_TYPE_MS, EGdbusStoreMS))
#define EGDBUS_STORE_IS_MS(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), EGDBUS_STORE_TYPE_MS))
#define EGDBUS_STORE_MS_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), EGDBUS_STORE_TYPE_MS, EGdbusStoreMS))

struct _EGdbusStoreMS;
typedef struct _EGdbusStoreMS EGdbusStoreMS;
typedef struct _EGdbusStoreMSIface EGdbusStoreMSIface;

struct _EGdbusStoreMSIface
{
  GTypeInterface parent_iface;

  /* GObject signal class handlers for incoming D-Bus method calls: */
  gboolean (*handle_get_folder) (
    EGdbusStoreMS *object,
    GDBusMethodInvocation *invocation,
    const gchar *full_name);

  gboolean (*handle_get_folder_info) (
    EGdbusStoreMS *object,
    GDBusMethodInvocation *invocation,
    const gchar *full_name,
    guint flags);

  gboolean (*handle_get_inbox) (
    EGdbusStoreMS *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_junk) (
    EGdbusStoreMS *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_trash) (
    EGdbusStoreMS *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_create_folder) (
    EGdbusStoreMS *object,
    GDBusMethodInvocation *invocation,
    const gchar *parent_name,
    const gchar *folder_name);

  gboolean (*handle_delete_folder) (
    EGdbusStoreMS *object,
    GDBusMethodInvocation *invocation,
    const gchar *folder_name);

  gboolean (*handle_rename_folder) (
    EGdbusStoreMS *object,
    GDBusMethodInvocation *invocation,
    const gchar *old_folder_name,
    const gchar *new_folder_name);

  gboolean (*handle_supports_subscriptions) (
    EGdbusStoreMS *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_is_folder_subscribed) (
    EGdbusStoreMS *object,
    GDBusMethodInvocation *invocation,
    const gchar *folder_name);

  gboolean (*handle_subscribe_folder) (
    EGdbusStoreMS *object,
    GDBusMethodInvocation *invocation,
    const gchar *folder_name);

  gboolean (*handle_unsubscribe_folder) (
    EGdbusStoreMS *object,
    GDBusMethodInvocation *invocation,
    const gchar *folder_name);

  gboolean (*handle_sync) (
    EGdbusStoreMS *object,
    GDBusMethodInvocation *invocation,
    gboolean expunge);

  gboolean (*handle_noop) (
    EGdbusStoreMS *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_can_refresh_folder) (
    EGdbusStoreMS *object,
    GDBusMethodInvocation *invocation,
    GVariant *info);


  /* GObject signal class handlers for received D-Bus signals: */
  void (*folder_opened) (
    EGdbusStoreMS *object,
    const gchar *folder);

  void (*folder_created) (
    EGdbusStoreMS *object,
    GVariant *info);

  void (*folder_deleted) (
    EGdbusStoreMS *object,
    GVariant *info);

  void (*folder_renamed) (
    EGdbusStoreMS *object,
    const gchar *old_name,
    GVariant *info);

  void (*folder_subscribed) (
    EGdbusStoreMS *object,
    GVariant *info);

  void (*folder_unsubscribed) (
    EGdbusStoreMS *object,
    GVariant *info);

};

GType egdbus_store_ms_get_gtype (void) G_GNUC_CONST;

GDBusInterfaceInfo *egdbus_store_ms_interface_info (void);


/* D-Bus method call completion functions: */
void egdbus_store_ms_complete_get_folder (
    EGdbusStoreMS *object,
    GDBusMethodInvocation *invocation,
    const gchar *folder);

void egdbus_store_ms_complete_get_folder_info (
    EGdbusStoreMS *object,
    GDBusMethodInvocation *invocation,
    GVariant *infos);

void egdbus_store_ms_complete_get_inbox (
    EGdbusStoreMS *object,
    GDBusMethodInvocation *invocation,
    const gchar *folder);

void egdbus_store_ms_complete_get_junk (
    EGdbusStoreMS *object,
    GDBusMethodInvocation *invocation,
    const gchar *folder);

void egdbus_store_ms_complete_get_trash (
    EGdbusStoreMS *object,
    GDBusMethodInvocation *invocation,
    const gchar *folder);

void egdbus_store_ms_complete_create_folder (
    EGdbusStoreMS *object,
    GDBusMethodInvocation *invocation,
    GVariant *info);

void egdbus_store_ms_complete_delete_folder (
    EGdbusStoreMS *object,
    GDBusMethodInvocation *invocation,
    gboolean success);

void egdbus_store_ms_complete_rename_folder (
    EGdbusStoreMS *object,
    GDBusMethodInvocation *invocation,
    gboolean success);

void egdbus_store_ms_complete_supports_subscriptions (
    EGdbusStoreMS *object,
    GDBusMethodInvocation *invocation,
    gboolean success);

void egdbus_store_ms_complete_is_folder_subscribed (
    EGdbusStoreMS *object,
    GDBusMethodInvocation *invocation,
    gboolean success);

void egdbus_store_ms_complete_subscribe_folder (
    EGdbusStoreMS *object,
    GDBusMethodInvocation *invocation,
    gboolean success);

void egdbus_store_ms_complete_unsubscribe_folder (
    EGdbusStoreMS *object,
    GDBusMethodInvocation *invocation,
    gboolean success);

void egdbus_store_ms_complete_sync (
    EGdbusStoreMS *object,
    GDBusMethodInvocation *invocation,
    gboolean success);

void egdbus_store_ms_complete_noop (
    EGdbusStoreMS *object,
    GDBusMethodInvocation *invocation,
    gboolean success);

void egdbus_store_ms_complete_can_refresh_folder (
    EGdbusStoreMS *object,
    GDBusMethodInvocation *invocation,
    gboolean success);



/* D-Bus signal emissions functions: */
void egdbus_store_ms_emit_folder_opened (
    EGdbusStoreMS *object,
    const gchar *folder);

void egdbus_store_ms_emit_folder_created (
    EGdbusStoreMS *object,
    GVariant *info);

void egdbus_store_ms_emit_folder_deleted (
    EGdbusStoreMS *object,
    GVariant *info);

void egdbus_store_ms_emit_folder_renamed (
    EGdbusStoreMS *object,
    const gchar *old_name,
    GVariant *info);

void egdbus_store_ms_emit_folder_subscribed (
    EGdbusStoreMS *object,
    GVariant *info);

void egdbus_store_ms_emit_folder_unsubscribed (
    EGdbusStoreMS *object,
    GVariant *info);



/* D-Bus method calls: */
void egdbus_store_ms_call_get_folder (
    EGdbusStoreMS *proxy,
    const gchar *full_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_ms_call_get_folder_finish (
    EGdbusStoreMS *proxy,
    gchar **out_folder,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_ms_call_get_folder_sync (
    EGdbusStoreMS *proxy,
    const gchar *full_name,
    gchar **out_folder,
    GCancellable *cancellable,
    GError **error);

void egdbus_store_ms_call_get_folder_info (
    EGdbusStoreMS *proxy,
    const gchar *full_name,
    guint flags,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_ms_call_get_folder_info_finish (
    EGdbusStoreMS *proxy,
    GVariant **out_infos,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_ms_call_get_folder_info_sync (
    EGdbusStoreMS *proxy,
    const gchar *full_name,
    guint flags,
    GVariant **out_infos,
    GCancellable *cancellable,
    GError **error);

void egdbus_store_ms_call_get_inbox (
    EGdbusStoreMS *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_ms_call_get_inbox_finish (
    EGdbusStoreMS *proxy,
    gchar **out_folder,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_ms_call_get_inbox_sync (
    EGdbusStoreMS *proxy,
    gchar **out_folder,
    GCancellable *cancellable,
    GError **error);

void egdbus_store_ms_call_get_junk (
    EGdbusStoreMS *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_ms_call_get_junk_finish (
    EGdbusStoreMS *proxy,
    gchar **out_folder,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_ms_call_get_junk_sync (
    EGdbusStoreMS *proxy,
    gchar **out_folder,
    GCancellable *cancellable,
    GError **error);

void egdbus_store_ms_call_get_trash (
    EGdbusStoreMS *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_ms_call_get_trash_finish (
    EGdbusStoreMS *proxy,
    gchar **out_folder,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_ms_call_get_trash_sync (
    EGdbusStoreMS *proxy,
    gchar **out_folder,
    GCancellable *cancellable,
    GError **error);

void egdbus_store_ms_call_create_folder (
    EGdbusStoreMS *proxy,
    const gchar *parent_name,
    const gchar *folder_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_ms_call_create_folder_finish (
    EGdbusStoreMS *proxy,
    GVariant **out_info,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_ms_call_create_folder_sync (
    EGdbusStoreMS *proxy,
    const gchar *parent_name,
    const gchar *folder_name,
    GVariant **out_info,
    GCancellable *cancellable,
    GError **error);

void egdbus_store_ms_call_delete_folder (
    EGdbusStoreMS *proxy,
    const gchar *folder_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_ms_call_delete_folder_finish (
    EGdbusStoreMS *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_ms_call_delete_folder_sync (
    EGdbusStoreMS *proxy,
    const gchar *folder_name,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);

void egdbus_store_ms_call_rename_folder (
    EGdbusStoreMS *proxy,
    const gchar *old_folder_name,
    const gchar *new_folder_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_ms_call_rename_folder_finish (
    EGdbusStoreMS *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_ms_call_rename_folder_sync (
    EGdbusStoreMS *proxy,
    const gchar *old_folder_name,
    const gchar *new_folder_name,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);

void egdbus_store_ms_call_supports_subscriptions (
    EGdbusStoreMS *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_ms_call_supports_subscriptions_finish (
    EGdbusStoreMS *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_ms_call_supports_subscriptions_sync (
    EGdbusStoreMS *proxy,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);

void egdbus_store_ms_call_is_folder_subscribed (
    EGdbusStoreMS *proxy,
    const gchar *folder_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_ms_call_is_folder_subscribed_finish (
    EGdbusStoreMS *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_ms_call_is_folder_subscribed_sync (
    EGdbusStoreMS *proxy,
    const gchar *folder_name,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);

void egdbus_store_ms_call_subscribe_folder (
    EGdbusStoreMS *proxy,
    const gchar *folder_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_ms_call_subscribe_folder_finish (
    EGdbusStoreMS *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_ms_call_subscribe_folder_sync (
    EGdbusStoreMS *proxy,
    const gchar *folder_name,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);

void egdbus_store_ms_call_unsubscribe_folder (
    EGdbusStoreMS *proxy,
    const gchar *folder_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_ms_call_unsubscribe_folder_finish (
    EGdbusStoreMS *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_ms_call_unsubscribe_folder_sync (
    EGdbusStoreMS *proxy,
    const gchar *folder_name,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);

void egdbus_store_ms_call_sync (
    EGdbusStoreMS *proxy,
    gboolean expunge,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_ms_call_sync_finish (
    EGdbusStoreMS *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_ms_call_sync_sync (
    EGdbusStoreMS *proxy,
    gboolean expunge,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);

void egdbus_store_ms_call_noop (
    EGdbusStoreMS *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_ms_call_noop_finish (
    EGdbusStoreMS *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_ms_call_noop_sync (
    EGdbusStoreMS *proxy,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);

void egdbus_store_ms_call_can_refresh_folder (
    EGdbusStoreMS *proxy,
    GVariant *info,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_ms_call_can_refresh_folder_finish (
    EGdbusStoreMS *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_ms_call_can_refresh_folder_sync (
    EGdbusStoreMS *proxy,
    GVariant *info,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define EGDBUS_STORE_TYPE_MS_PROXY (egdbus_store_ms_proxy_get_gtype ())
#define EGDBUS_STORE_MS_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), EGDBUS_STORE_TYPE_MS_PROXY, EGdbusStoreMSProxy))
#define EGDBUS_STORE_MS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), EGDBUS_STORE_TYPE_MS_PROXY, EGdbusStoreMSProxyClass))
#define EGDBUS_STORE_MS_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), EGDBUS_STORE_TYPE_MS_PROXY, EGdbusStoreMSProxyClass))
#define EGDBUS_STORE_IS_MS_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), EGDBUS_STORE_TYPE_MS_PROXY))
#define EGDBUS_STORE_IS_MS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), EGDBUS_STORE_TYPE_MS_PROXY))

typedef struct _EGdbusStoreMSProxy EGdbusStoreMSProxy;
typedef struct _EGdbusStoreMSProxyClass EGdbusStoreMSProxyClass;
typedef struct _EGdbusStoreMSProxyPrivate EGdbusStoreMSProxyPrivate;

struct _EGdbusStoreMSProxy
{
  GDBusProxy parent_instance;
  EGdbusStoreMSProxyPrivate *priv;
};

struct _EGdbusStoreMSProxyClass
{
  GDBusProxyClass parent_class;
};

GType egdbus_store_ms_proxy_get_gtype (void) G_GNUC_CONST;

void egdbus_store_ms_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
EGdbusStoreMS *egdbus_store_ms_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
EGdbusStoreMS *egdbus_store_ms_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void egdbus_store_ms_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
EGdbusStoreMS *egdbus_store_ms_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
EGdbusStoreMS *egdbus_store_ms_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

#define EGDBUS_STORE_GET_MS(object_proxy) (g_dbus_object_proxy_lookup_with_typecheck (object_proxy, "org.gnome.evolution.dataserver.mail.Store", EGDBUS_STORE_TYPE_MS))
#define EGDBUS_STORE_PEEK_MS(object_proxy) (g_dbus_object_proxy_peek_with_typecheck (object_proxy, "org.gnome.evolution.dataserver.mail.Store", EGDBUS_STORE_TYPE_MS))


/* ---- */

#define EGDBUS_STORE_TYPE_MS_STUB (egdbus_store_ms_stub_get_gtype ())
#define EGDBUS_STORE_MS_STUB(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), EGDBUS_STORE_TYPE_MS_STUB, EGdbusStoreMSStub))
#define EGDBUS_STORE_MS_STUB_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), EGDBUS_STORE_TYPE_MS_STUB, EGdbusStoreMSStubClass))
#define EGDBUS_STORE_MS_STUB_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), EGDBUS_STORE_TYPE_MS_STUB, EGdbusStoreMSStubClass))
#define EGDBUS_STORE_IS_MS_STUB(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), EGDBUS_STORE_TYPE_MS_STUB))
#define EGDBUS_STORE_IS_MS_STUB_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), EGDBUS_STORE_TYPE_MS_STUB))

typedef struct _EGdbusStoreMSStub EGdbusStoreMSStub;
typedef struct _EGdbusStoreMSStubClass EGdbusStoreMSStubClass;
typedef struct _EGdbusStoreMSStubPrivate EGdbusStoreMSStubPrivate;

struct _EGdbusStoreMSStub
{
  GObject parent_instance;
  EGdbusStoreMSStubPrivate *priv;
};

struct _EGdbusStoreMSStubClass
{
  GObjectClass parent_class;
};

GType egdbus_store_ms_stub_get_gtype (void) G_GNUC_CONST;

EGdbusStoreMS *egdbus_store_ms_stub_new (void);


/* ---- */

#define EGDBUS_STORE_TYPE_PROXY_MANAGER (egdbus_store_proxy_manager_get_gtype ())
#define EGDBUS_STORE_PROXY_MANAGER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), EGDBUS_STORE_TYPE_PROXY_MANAGER, EGdbusStoreProxyManager))
#define EGDBUS_STORE_PROXY_MANAGER_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), EGDBUS_STORE_TYPE_PROXY_MANAGER, EGdbusStoreProxyManagerClass))
#define EGDBUS_STORE_PROXY_MANAGER_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), EGDBUS_STORE_TYPE_PROXY_MANAGER, EGdbusStoreProxyManagerClass))
#define EGDBUS_STORE_IS_PROXY_MANAGER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), EGDBUS_STORE_TYPE_PROXY_MANAGER))
#define EGDBUS_STORE_IS_PROXY_MANAGER_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), EGDBUS_STORE_TYPE_PROXY_MANAGER))

typedef struct _EGdbusStoreProxyManager EGdbusStoreProxyManager;
typedef struct _EGdbusStoreProxyManagerClass EGdbusStoreProxyManagerClass;
typedef struct _EGdbusStoreProxyManagerPrivate EGdbusStoreProxyManagerPrivate;

struct _EGdbusStoreProxyManager
{
  GDBusProxyManager parent_instance;
  EGdbusStoreProxyManagerPrivate *priv;
};

struct _EGdbusStoreProxyManagerClass
{
  GDBusProxyManagerClass parent_class;
};

GType egdbus_store_proxy_manager_get_gtype (void) G_GNUC_CONST;

GDBusProxyTypeFunc egdbus_store_proxy_manager_get_proxy_type_func (void);

void egdbus_store_proxy_manager_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GDBusProxyManager *egdbus_store_proxy_manager_new_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusProxyManager *egdbus_store_proxy_manager_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void egdbus_store_proxy_manager_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GDBusProxyManager *egdbus_store_proxy_manager_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusProxyManager *egdbus_store_proxy_manager_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


G_END_DECLS

#endif /* __E_GDBUS_EMAILSTORE_H__ */
