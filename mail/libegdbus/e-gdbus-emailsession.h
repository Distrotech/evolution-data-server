/*
 * Generated by gdbus-codegen.py 0.1. DO NOT EDIT.
 */

#ifndef __E_GDBUS_EMAILSESSION_H__
#define __E_GDBUS_EMAILSESSION_H__

#include <gio/gio.h>
#include <gdbusinterface.h>
#include <gdbusobjectproxy.h>
#include <gdbusproxymanager.h>
#include <gdbusobject.h>
#include <gdbusobjectmanager.h>
#include <gdbuscodegen-enumtypes.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.evolution.dataserver.mail.Session */

#define EGDBUS_SESSION_TYPE_CS (egdbus_session_cs_get_gtype ())
#define EGDBUS_SESSION_CS(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), EGDBUS_SESSION_TYPE_CS, EGdbusSessionCS))
#define EGDBUS_SESSION_IS_CS(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), EGDBUS_SESSION_TYPE_CS))
#define EGDBUS_SESSION_CS_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), EGDBUS_SESSION_TYPE_CS, EGdbusSessionCS))

struct _EGdbusSessionCS;
typedef struct _EGdbusSessionCS EGdbusSessionCS;
typedef struct _EGdbusSessionCSIface EGdbusSessionCSIface;

struct _EGdbusSessionCSIface
{
  GTypeInterface parent_iface;

  /* GObject signal class handlers for incoming D-Bus method calls: */
  gboolean (*handle_get_store) (
    EGdbusSessionCS *object,
    GDBusMethodInvocation *invocation,
    const gchar *uri);

  gboolean (*handle_get_local_store) (
    EGdbusSessionCS *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_add_password) (
    EGdbusSessionCS *object,
    GDBusMethodInvocation *invocation,
    const gchar *key,
    const gchar *password,
    gboolean remember);

  gboolean (*handle_get_local_folder) (
    EGdbusSessionCS *object,
    GDBusMethodInvocation *invocation,
    const gchar *type);

  gboolean (*handle_get_folder_from_uri) (
    EGdbusSessionCS *object,
    GDBusMethodInvocation *invocation,
    const gchar *uri);


  /* GObject signal class handlers for received D-Bus signals: */
  void (*get_password) (
    EGdbusSessionCS *object,
    const gchar *title,
    const gchar *prompt,
    const gchar *key);

};

GType egdbus_session_cs_get_gtype (void) G_GNUC_CONST;

GDBusInterfaceInfo *egdbus_session_cs_interface_info (void);


/* D-Bus method call completion functions: */
void egdbus_session_cs_complete_get_store (
    EGdbusSessionCS *object,
    GDBusMethodInvocation *invocation,
    const gchar *store);

void egdbus_session_cs_complete_get_local_store (
    EGdbusSessionCS *object,
    GDBusMethodInvocation *invocation,
    const gchar *store);

void egdbus_session_cs_complete_add_password (
    EGdbusSessionCS *object,
    GDBusMethodInvocation *invocation);

void egdbus_session_cs_complete_get_local_folder (
    EGdbusSessionCS *object,
    GDBusMethodInvocation *invocation,
    const gchar *folder);

void egdbus_session_cs_complete_get_folder_from_uri (
    EGdbusSessionCS *object,
    GDBusMethodInvocation *invocation,
    const gchar *folder);



/* D-Bus signal emissions functions: */
void egdbus_session_cs_emit_get_password (
    EGdbusSessionCS *object,
    const gchar *title,
    const gchar *prompt,
    const gchar *key);



/* D-Bus method calls: */
void egdbus_session_cs_call_get_store (
    EGdbusSessionCS *proxy,
    const gchar *uri,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_session_cs_call_get_store_finish (
    EGdbusSessionCS *proxy,
    gchar **out_store,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_session_cs_call_get_store_sync (
    EGdbusSessionCS *proxy,
    const gchar *uri,
    gchar **out_store,
    GCancellable *cancellable,
    GError **error);

void egdbus_session_cs_call_get_local_store (
    EGdbusSessionCS *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_session_cs_call_get_local_store_finish (
    EGdbusSessionCS *proxy,
    gchar **out_store,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_session_cs_call_get_local_store_sync (
    EGdbusSessionCS *proxy,
    gchar **out_store,
    GCancellable *cancellable,
    GError **error);

void egdbus_session_cs_call_add_password (
    EGdbusSessionCS *proxy,
    const gchar *key,
    const gchar *password,
    gboolean remember,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_session_cs_call_add_password_finish (
    EGdbusSessionCS *proxy,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_session_cs_call_add_password_sync (
    EGdbusSessionCS *proxy,
    const gchar *key,
    const gchar *password,
    gboolean remember,
    GCancellable *cancellable,
    GError **error);

void egdbus_session_cs_call_get_local_folder (
    EGdbusSessionCS *proxy,
    const gchar *type,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_session_cs_call_get_local_folder_finish (
    EGdbusSessionCS *proxy,
    gchar **out_folder,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_session_cs_call_get_local_folder_sync (
    EGdbusSessionCS *proxy,
    const gchar *type,
    gchar **out_folder,
    GCancellable *cancellable,
    GError **error);

void egdbus_session_cs_call_get_folder_from_uri (
    EGdbusSessionCS *proxy,
    const gchar *uri,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_session_cs_call_get_folder_from_uri_finish (
    EGdbusSessionCS *proxy,
    gchar **out_folder,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_session_cs_call_get_folder_from_uri_sync (
    EGdbusSessionCS *proxy,
    const gchar *uri,
    gchar **out_folder,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define EGDBUS_SESSION_TYPE_CS_PROXY (egdbus_session_cs_proxy_get_gtype ())
#define EGDBUS_SESSION_CS_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), EGDBUS_SESSION_TYPE_CS_PROXY, EGdbusSessionCSProxy))
#define EGDBUS_SESSION_CS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), EGDBUS_SESSION_TYPE_CS_PROXY, EGdbusSessionCSProxyClass))
#define EGDBUS_SESSION_CS_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), EGDBUS_SESSION_TYPE_CS_PROXY, EGdbusSessionCSProxyClass))
#define EGDBUS_SESSION_IS_CS_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), EGDBUS_SESSION_TYPE_CS_PROXY))
#define EGDBUS_SESSION_IS_CS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), EGDBUS_SESSION_TYPE_CS_PROXY))

typedef struct _EGdbusSessionCSProxy EGdbusSessionCSProxy;
typedef struct _EGdbusSessionCSProxyClass EGdbusSessionCSProxyClass;
typedef struct _EGdbusSessionCSProxyPrivate EGdbusSessionCSProxyPrivate;

struct _EGdbusSessionCSProxy
{
  GDBusProxy parent_instance;
  EGdbusSessionCSProxyPrivate *priv;
};

struct _EGdbusSessionCSProxyClass
{
  GDBusProxyClass parent_class;
};

GType egdbus_session_cs_proxy_get_gtype (void) G_GNUC_CONST;

void egdbus_session_cs_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
EGdbusSessionCS *egdbus_session_cs_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
EGdbusSessionCS *egdbus_session_cs_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void egdbus_session_cs_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
EGdbusSessionCS *egdbus_session_cs_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
EGdbusSessionCS *egdbus_session_cs_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

#define EGDBUS_SESSION_GET_CS(object_proxy) (g_dbus_object_proxy_lookup_with_typecheck (object_proxy, "org.gnome.evolution.dataserver.mail.Session", EGDBUS_SESSION_TYPE_CS))
#define EGDBUS_SESSION_PEEK_CS(object_proxy) (g_dbus_object_proxy_peek_with_typecheck (object_proxy, "org.gnome.evolution.dataserver.mail.Session", EGDBUS_SESSION_TYPE_CS))


/* ---- */

#define EGDBUS_SESSION_TYPE_CS_STUB (egdbus_session_cs_stub_get_gtype ())
#define EGDBUS_SESSION_CS_STUB(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), EGDBUS_SESSION_TYPE_CS_STUB, EGdbusSessionCSStub))
#define EGDBUS_SESSION_CS_STUB_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), EGDBUS_SESSION_TYPE_CS_STUB, EGdbusSessionCSStubClass))
#define EGDBUS_SESSION_CS_STUB_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), EGDBUS_SESSION_TYPE_CS_STUB, EGdbusSessionCSStubClass))
#define EGDBUS_SESSION_IS_CS_STUB(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), EGDBUS_SESSION_TYPE_CS_STUB))
#define EGDBUS_SESSION_IS_CS_STUB_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), EGDBUS_SESSION_TYPE_CS_STUB))

typedef struct _EGdbusSessionCSStub EGdbusSessionCSStub;
typedef struct _EGdbusSessionCSStubClass EGdbusSessionCSStubClass;
typedef struct _EGdbusSessionCSStubPrivate EGdbusSessionCSStubPrivate;

struct _EGdbusSessionCSStub
{
  GObject parent_instance;
  EGdbusSessionCSStubPrivate *priv;
};

struct _EGdbusSessionCSStubClass
{
  GObjectClass parent_class;
};

GType egdbus_session_cs_stub_get_gtype (void) G_GNUC_CONST;

EGdbusSessionCS *egdbus_session_cs_stub_new (void);


/* ---- */

#define EGDBUS_SESSION_TYPE_PROXY_MANAGER (egdbus_session_proxy_manager_get_gtype ())
#define EGDBUS_SESSION_PROXY_MANAGER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), EGDBUS_SESSION_TYPE_PROXY_MANAGER, EGdbusSessionProxyManager))
#define EGDBUS_SESSION_PROXY_MANAGER_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), EGDBUS_SESSION_TYPE_PROXY_MANAGER, EGdbusSessionProxyManagerClass))
#define EGDBUS_SESSION_PROXY_MANAGER_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), EGDBUS_SESSION_TYPE_PROXY_MANAGER, EGdbusSessionProxyManagerClass))
#define EGDBUS_SESSION_IS_PROXY_MANAGER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), EGDBUS_SESSION_TYPE_PROXY_MANAGER))
#define EGDBUS_SESSION_IS_PROXY_MANAGER_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), EGDBUS_SESSION_TYPE_PROXY_MANAGER))

typedef struct _EGdbusSessionProxyManager EGdbusSessionProxyManager;
typedef struct _EGdbusSessionProxyManagerClass EGdbusSessionProxyManagerClass;
typedef struct _EGdbusSessionProxyManagerPrivate EGdbusSessionProxyManagerPrivate;

struct _EGdbusSessionProxyManager
{
  GDBusProxyManager parent_instance;
  EGdbusSessionProxyManagerPrivate *priv;
};

struct _EGdbusSessionProxyManagerClass
{
  GDBusProxyManagerClass parent_class;
};

GType egdbus_session_proxy_manager_get_gtype (void) G_GNUC_CONST;

GDBusProxyTypeFunc egdbus_session_proxy_manager_get_proxy_type_func (void);

void egdbus_session_proxy_manager_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GDBusProxyManager *egdbus_session_proxy_manager_new_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusProxyManager *egdbus_session_proxy_manager_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void egdbus_session_proxy_manager_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GDBusProxyManager *egdbus_session_proxy_manager_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusProxyManager *egdbus_session_proxy_manager_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


G_END_DECLS

#endif /* __E_GDBUS_EMAILSESSION_H__ */
