/*
 * Generated by gdbus-codegen.py 0.1. DO NOT EDIT.
 */

#ifndef __E_GDBUS_EMAILFOLDER_H__
#define __E_GDBUS_EMAILFOLDER_H__

#include <gio/gio.h>
#include <gdbusinterface.h>
#include <gdbusobjectproxy.h>
#include <gdbusproxymanager.h>
#include <gdbusobject.h>
#include <gdbusobjectmanager.h>
#include <gdbuscodegen-enumtypes.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.evolution.dataserver.mail.Folder */

#define EGDBUS_FOLDER_TYPE_CF (egdbus_folder_cf_get_gtype ())
#define EGDBUS_FOLDER_CF(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), EGDBUS_FOLDER_TYPE_CF, EGdbusFolderCF))
#define EGDBUS_FOLDER_IS_CF(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), EGDBUS_FOLDER_TYPE_CF))
#define EGDBUS_FOLDER_CF_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), EGDBUS_FOLDER_TYPE_CF, EGdbusFolderCF))

struct _EGdbusFolderCF;
typedef struct _EGdbusFolderCF EGdbusFolderCF;
typedef struct _EGdbusFolderCFIface EGdbusFolderCFIface;

struct _EGdbusFolderCFIface
{
  GTypeInterface parent_iface;

  /* GObject signal class handlers for incoming D-Bus method calls: */
  gboolean (*handle_refresh_info) (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_sync) (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation,
    gboolean expunge);

  gboolean (*handle_expunge) (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_name) (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_set_name) (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation,
    const gchar *name);

  gboolean (*handle_get_full_name) (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_set_full_name) (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation,
    const gchar *name);

  gboolean (*handle_get_description) (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_set_description) (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation,
    const gchar *desc);

  gboolean (*handle_get_permanent_flags) (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_has_summary_capability) (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_has_search_capability) (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_total_message_count) (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_unread_message_count) (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_deleted_message_count) (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_message_flags) (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation,
    const gchar *uid);

  gboolean (*handle_set_message_flags) (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation,
    const gchar *uid,
    guint flags,
    guint set);

  gboolean (*handle_get_message_user_flag) (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation,
    const gchar *uid,
    const gchar *flagname);

  gboolean (*handle_set_message_user_flag) (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation,
    const gchar *uid,
    const gchar *flagname,
    guint set);

  gboolean (*handle_get_message_user_tag) (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation,
    const gchar *uid,
    const gchar *param);

  gboolean (*handle_set_message_user_tag) (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation,
    const gchar *uid,
    const gchar *param,
    const gchar *value);

  gboolean (*handle_get_parent_store) (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_append_message) (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation,
    GVariant *info,
    const gchar *message);

  gboolean (*handle_get_uids) (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_message) (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation,
    const gchar *uid);

  gboolean (*handle_search_by_expression) (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation,
    const gchar *expression);

  gboolean (*handle_search_by_uids) (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation,
    const gchar *expression,
    const gchar *const *searchuids);

  gboolean (*handle_get_message_info) (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation,
    const gchar *uid);

  gboolean (*handle_transfer_messages_to) (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *uids,
    const gchar *destfolder,
    gboolean deleteoriginals);

  gboolean (*handle_prepare_summary) (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation);


  /* GObject signal class handlers for received D-Bus signals: */
  void (*folder_changed) (
    EGdbusFolderCF *object,
    const gchar *const *uids_added,
    const gchar *const *uids_removed,
    const gchar *const *uids_changed,
    const gchar *const *uids_recent);

};

GType egdbus_folder_cf_get_gtype (void) G_GNUC_CONST;

GDBusInterfaceInfo *egdbus_folder_cf_interface_info (void);


/* D-Bus method call completion functions: */
void egdbus_folder_cf_complete_refresh_info (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation,
    gboolean success);

void egdbus_folder_cf_complete_sync (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation,
    gboolean success);

void egdbus_folder_cf_complete_expunge (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation,
    gboolean success);

void egdbus_folder_cf_complete_get_name (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation,
    const gchar *name);

void egdbus_folder_cf_complete_set_name (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation);

void egdbus_folder_cf_complete_get_full_name (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation,
    const gchar *name);

void egdbus_folder_cf_complete_set_full_name (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation);

void egdbus_folder_cf_complete_get_description (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation,
    const gchar *desc);

void egdbus_folder_cf_complete_set_description (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation);

void egdbus_folder_cf_complete_get_permanent_flags (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation,
    guint flags);

void egdbus_folder_cf_complete_has_summary_capability (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation,
    gboolean summary);

void egdbus_folder_cf_complete_has_search_capability (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation,
    gboolean search);

void egdbus_folder_cf_complete_total_message_count (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation,
    gint count);

void egdbus_folder_cf_complete_unread_message_count (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation,
    gint count);

void egdbus_folder_cf_complete_deleted_message_count (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation,
    gint count);

void egdbus_folder_cf_complete_get_message_flags (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation,
    guint flags);

void egdbus_folder_cf_complete_set_message_flags (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation,
    gboolean success);

void egdbus_folder_cf_complete_get_message_user_flag (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation,
    gboolean flag);

void egdbus_folder_cf_complete_set_message_user_flag (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation);

void egdbus_folder_cf_complete_get_message_user_tag (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation,
    const gchar *value);

void egdbus_folder_cf_complete_set_message_user_tag (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation);

void egdbus_folder_cf_complete_get_parent_store (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation,
    const gchar *store);

void egdbus_folder_cf_complete_append_message (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation,
    const gchar *appendeduid,
    gboolean success);

void egdbus_folder_cf_complete_get_uids (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *uids);

void egdbus_folder_cf_complete_get_message (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation,
    const gchar *message);

void egdbus_folder_cf_complete_search_by_expression (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *uids);

void egdbus_folder_cf_complete_search_by_uids (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *resultuids);

void egdbus_folder_cf_complete_get_message_info (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation,
    GVariant *info);

void egdbus_folder_cf_complete_transfer_messages_to (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *returnuids);

void egdbus_folder_cf_complete_prepare_summary (
    EGdbusFolderCF *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void egdbus_folder_cf_emit_folder_changed (
    EGdbusFolderCF *object,
    const gchar *const *uids_added,
    const gchar *const *uids_removed,
    const gchar *const *uids_changed,
    const gchar *const *uids_recent);



/* D-Bus method calls: */
void egdbus_folder_cf_call_refresh_info (
    EGdbusFolderCF *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_folder_cf_call_refresh_info_finish (
    EGdbusFolderCF *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_folder_cf_call_refresh_info_sync (
    EGdbusFolderCF *proxy,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);

void egdbus_folder_cf_call_sync (
    EGdbusFolderCF *proxy,
    gboolean expunge,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_folder_cf_call_sync_finish (
    EGdbusFolderCF *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_folder_cf_call_sync_sync (
    EGdbusFolderCF *proxy,
    gboolean expunge,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);

void egdbus_folder_cf_call_expunge (
    EGdbusFolderCF *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_folder_cf_call_expunge_finish (
    EGdbusFolderCF *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_folder_cf_call_expunge_sync (
    EGdbusFolderCF *proxy,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);

void egdbus_folder_cf_call_get_name (
    EGdbusFolderCF *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_folder_cf_call_get_name_finish (
    EGdbusFolderCF *proxy,
    gchar **out_name,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_folder_cf_call_get_name_sync (
    EGdbusFolderCF *proxy,
    gchar **out_name,
    GCancellable *cancellable,
    GError **error);

void egdbus_folder_cf_call_set_name (
    EGdbusFolderCF *proxy,
    const gchar *name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_folder_cf_call_set_name_finish (
    EGdbusFolderCF *proxy,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_folder_cf_call_set_name_sync (
    EGdbusFolderCF *proxy,
    const gchar *name,
    GCancellable *cancellable,
    GError **error);

void egdbus_folder_cf_call_get_full_name (
    EGdbusFolderCF *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_folder_cf_call_get_full_name_finish (
    EGdbusFolderCF *proxy,
    gchar **out_name,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_folder_cf_call_get_full_name_sync (
    EGdbusFolderCF *proxy,
    gchar **out_name,
    GCancellable *cancellable,
    GError **error);

void egdbus_folder_cf_call_set_full_name (
    EGdbusFolderCF *proxy,
    const gchar *name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_folder_cf_call_set_full_name_finish (
    EGdbusFolderCF *proxy,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_folder_cf_call_set_full_name_sync (
    EGdbusFolderCF *proxy,
    const gchar *name,
    GCancellable *cancellable,
    GError **error);

void egdbus_folder_cf_call_get_description (
    EGdbusFolderCF *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_folder_cf_call_get_description_finish (
    EGdbusFolderCF *proxy,
    gchar **out_desc,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_folder_cf_call_get_description_sync (
    EGdbusFolderCF *proxy,
    gchar **out_desc,
    GCancellable *cancellable,
    GError **error);

void egdbus_folder_cf_call_set_description (
    EGdbusFolderCF *proxy,
    const gchar *desc,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_folder_cf_call_set_description_finish (
    EGdbusFolderCF *proxy,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_folder_cf_call_set_description_sync (
    EGdbusFolderCF *proxy,
    const gchar *desc,
    GCancellable *cancellable,
    GError **error);

void egdbus_folder_cf_call_get_permanent_flags (
    EGdbusFolderCF *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_folder_cf_call_get_permanent_flags_finish (
    EGdbusFolderCF *proxy,
    guint *out_flags,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_folder_cf_call_get_permanent_flags_sync (
    EGdbusFolderCF *proxy,
    guint *out_flags,
    GCancellable *cancellable,
    GError **error);

void egdbus_folder_cf_call_has_summary_capability (
    EGdbusFolderCF *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_folder_cf_call_has_summary_capability_finish (
    EGdbusFolderCF *proxy,
    gboolean *out_summary,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_folder_cf_call_has_summary_capability_sync (
    EGdbusFolderCF *proxy,
    gboolean *out_summary,
    GCancellable *cancellable,
    GError **error);

void egdbus_folder_cf_call_has_search_capability (
    EGdbusFolderCF *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_folder_cf_call_has_search_capability_finish (
    EGdbusFolderCF *proxy,
    gboolean *out_search,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_folder_cf_call_has_search_capability_sync (
    EGdbusFolderCF *proxy,
    gboolean *out_search,
    GCancellable *cancellable,
    GError **error);

void egdbus_folder_cf_call_total_message_count (
    EGdbusFolderCF *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_folder_cf_call_total_message_count_finish (
    EGdbusFolderCF *proxy,
    gint *out_count,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_folder_cf_call_total_message_count_sync (
    EGdbusFolderCF *proxy,
    gint *out_count,
    GCancellable *cancellable,
    GError **error);

void egdbus_folder_cf_call_unread_message_count (
    EGdbusFolderCF *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_folder_cf_call_unread_message_count_finish (
    EGdbusFolderCF *proxy,
    gint *out_count,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_folder_cf_call_unread_message_count_sync (
    EGdbusFolderCF *proxy,
    gint *out_count,
    GCancellable *cancellable,
    GError **error);

void egdbus_folder_cf_call_deleted_message_count (
    EGdbusFolderCF *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_folder_cf_call_deleted_message_count_finish (
    EGdbusFolderCF *proxy,
    gint *out_count,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_folder_cf_call_deleted_message_count_sync (
    EGdbusFolderCF *proxy,
    gint *out_count,
    GCancellable *cancellable,
    GError **error);

void egdbus_folder_cf_call_get_message_flags (
    EGdbusFolderCF *proxy,
    const gchar *uid,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_folder_cf_call_get_message_flags_finish (
    EGdbusFolderCF *proxy,
    guint *out_flags,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_folder_cf_call_get_message_flags_sync (
    EGdbusFolderCF *proxy,
    const gchar *uid,
    guint *out_flags,
    GCancellable *cancellable,
    GError **error);

void egdbus_folder_cf_call_set_message_flags (
    EGdbusFolderCF *proxy,
    const gchar *uid,
    guint flags,
    guint set,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_folder_cf_call_set_message_flags_finish (
    EGdbusFolderCF *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_folder_cf_call_set_message_flags_sync (
    EGdbusFolderCF *proxy,
    const gchar *uid,
    guint flags,
    guint set,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);

void egdbus_folder_cf_call_get_message_user_flag (
    EGdbusFolderCF *proxy,
    const gchar *uid,
    const gchar *flagname,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_folder_cf_call_get_message_user_flag_finish (
    EGdbusFolderCF *proxy,
    gboolean *out_flag,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_folder_cf_call_get_message_user_flag_sync (
    EGdbusFolderCF *proxy,
    const gchar *uid,
    const gchar *flagname,
    gboolean *out_flag,
    GCancellable *cancellable,
    GError **error);

void egdbus_folder_cf_call_set_message_user_flag (
    EGdbusFolderCF *proxy,
    const gchar *uid,
    const gchar *flagname,
    guint set,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_folder_cf_call_set_message_user_flag_finish (
    EGdbusFolderCF *proxy,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_folder_cf_call_set_message_user_flag_sync (
    EGdbusFolderCF *proxy,
    const gchar *uid,
    const gchar *flagname,
    guint set,
    GCancellable *cancellable,
    GError **error);

void egdbus_folder_cf_call_get_message_user_tag (
    EGdbusFolderCF *proxy,
    const gchar *uid,
    const gchar *param,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_folder_cf_call_get_message_user_tag_finish (
    EGdbusFolderCF *proxy,
    gchar **out_value,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_folder_cf_call_get_message_user_tag_sync (
    EGdbusFolderCF *proxy,
    const gchar *uid,
    const gchar *param,
    gchar **out_value,
    GCancellable *cancellable,
    GError **error);

void egdbus_folder_cf_call_set_message_user_tag (
    EGdbusFolderCF *proxy,
    const gchar *uid,
    const gchar *param,
    const gchar *value,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_folder_cf_call_set_message_user_tag_finish (
    EGdbusFolderCF *proxy,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_folder_cf_call_set_message_user_tag_sync (
    EGdbusFolderCF *proxy,
    const gchar *uid,
    const gchar *param,
    const gchar *value,
    GCancellable *cancellable,
    GError **error);

void egdbus_folder_cf_call_get_parent_store (
    EGdbusFolderCF *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_folder_cf_call_get_parent_store_finish (
    EGdbusFolderCF *proxy,
    gchar **out_store,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_folder_cf_call_get_parent_store_sync (
    EGdbusFolderCF *proxy,
    gchar **out_store,
    GCancellable *cancellable,
    GError **error);

void egdbus_folder_cf_call_append_message (
    EGdbusFolderCF *proxy,
    GVariant *info,
    const gchar *message,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_folder_cf_call_append_message_finish (
    EGdbusFolderCF *proxy,
    gchar **out_appendeduid,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_folder_cf_call_append_message_sync (
    EGdbusFolderCF *proxy,
    GVariant *info,
    const gchar *message,
    gchar **out_appendeduid,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);

void egdbus_folder_cf_call_get_uids (
    EGdbusFolderCF *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_folder_cf_call_get_uids_finish (
    EGdbusFolderCF *proxy,
    gchar ***out_uids,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_folder_cf_call_get_uids_sync (
    EGdbusFolderCF *proxy,
    gchar ***out_uids,
    GCancellable *cancellable,
    GError **error);

void egdbus_folder_cf_call_get_message (
    EGdbusFolderCF *proxy,
    const gchar *uid,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_folder_cf_call_get_message_finish (
    EGdbusFolderCF *proxy,
    gchar **out_message,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_folder_cf_call_get_message_sync (
    EGdbusFolderCF *proxy,
    const gchar *uid,
    gchar **out_message,
    GCancellable *cancellable,
    GError **error);

void egdbus_folder_cf_call_search_by_expression (
    EGdbusFolderCF *proxy,
    const gchar *expression,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_folder_cf_call_search_by_expression_finish (
    EGdbusFolderCF *proxy,
    gchar ***out_uids,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_folder_cf_call_search_by_expression_sync (
    EGdbusFolderCF *proxy,
    const gchar *expression,
    gchar ***out_uids,
    GCancellable *cancellable,
    GError **error);

void egdbus_folder_cf_call_search_by_uids (
    EGdbusFolderCF *proxy,
    const gchar *expression,
    const gchar *const *searchuids,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_folder_cf_call_search_by_uids_finish (
    EGdbusFolderCF *proxy,
    gchar ***out_resultuids,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_folder_cf_call_search_by_uids_sync (
    EGdbusFolderCF *proxy,
    const gchar *expression,
    const gchar *const *searchuids,
    gchar ***out_resultuids,
    GCancellable *cancellable,
    GError **error);

void egdbus_folder_cf_call_get_message_info (
    EGdbusFolderCF *proxy,
    const gchar *uid,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_folder_cf_call_get_message_info_finish (
    EGdbusFolderCF *proxy,
    GVariant **out_info,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_folder_cf_call_get_message_info_sync (
    EGdbusFolderCF *proxy,
    const gchar *uid,
    GVariant **out_info,
    GCancellable *cancellable,
    GError **error);

void egdbus_folder_cf_call_transfer_messages_to (
    EGdbusFolderCF *proxy,
    const gchar *const *uids,
    const gchar *destfolder,
    gboolean deleteoriginals,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_folder_cf_call_transfer_messages_to_finish (
    EGdbusFolderCF *proxy,
    gchar ***out_returnuids,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_folder_cf_call_transfer_messages_to_sync (
    EGdbusFolderCF *proxy,
    const gchar *const *uids,
    const gchar *destfolder,
    gboolean deleteoriginals,
    gchar ***out_returnuids,
    GCancellable *cancellable,
    GError **error);

void egdbus_folder_cf_call_prepare_summary (
    EGdbusFolderCF *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_folder_cf_call_prepare_summary_finish (
    EGdbusFolderCF *proxy,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_folder_cf_call_prepare_summary_sync (
    EGdbusFolderCF *proxy,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define EGDBUS_FOLDER_TYPE_CF_PROXY (egdbus_folder_cf_proxy_get_gtype ())
#define EGDBUS_FOLDER_CF_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), EGDBUS_FOLDER_TYPE_CF_PROXY, EGdbusFolderCFProxy))
#define EGDBUS_FOLDER_CF_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), EGDBUS_FOLDER_TYPE_CF_PROXY, EGdbusFolderCFProxyClass))
#define EGDBUS_FOLDER_CF_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), EGDBUS_FOLDER_TYPE_CF_PROXY, EGdbusFolderCFProxyClass))
#define EGDBUS_FOLDER_IS_CF_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), EGDBUS_FOLDER_TYPE_CF_PROXY))
#define EGDBUS_FOLDER_IS_CF_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), EGDBUS_FOLDER_TYPE_CF_PROXY))

typedef struct _EGdbusFolderCFProxy EGdbusFolderCFProxy;
typedef struct _EGdbusFolderCFProxyClass EGdbusFolderCFProxyClass;
typedef struct _EGdbusFolderCFProxyPrivate EGdbusFolderCFProxyPrivate;

struct _EGdbusFolderCFProxy
{
  GDBusProxy parent_instance;
  EGdbusFolderCFProxyPrivate *priv;
};

struct _EGdbusFolderCFProxyClass
{
  GDBusProxyClass parent_class;
};

GType egdbus_folder_cf_proxy_get_gtype (void) G_GNUC_CONST;

void egdbus_folder_cf_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
EGdbusFolderCF *egdbus_folder_cf_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
EGdbusFolderCF *egdbus_folder_cf_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void egdbus_folder_cf_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
EGdbusFolderCF *egdbus_folder_cf_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
EGdbusFolderCF *egdbus_folder_cf_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

#define EGDBUS_FOLDER_GET_CF(object_proxy) (g_dbus_object_proxy_lookup_with_typecheck (object_proxy, "org.gnome.evolution.dataserver.mail.Folder", EGDBUS_FOLDER_TYPE_CF))
#define EGDBUS_FOLDER_PEEK_CF(object_proxy) (g_dbus_object_proxy_peek_with_typecheck (object_proxy, "org.gnome.evolution.dataserver.mail.Folder", EGDBUS_FOLDER_TYPE_CF))


/* ---- */

#define EGDBUS_FOLDER_TYPE_CF_STUB (egdbus_folder_cf_stub_get_gtype ())
#define EGDBUS_FOLDER_CF_STUB(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), EGDBUS_FOLDER_TYPE_CF_STUB, EGdbusFolderCFStub))
#define EGDBUS_FOLDER_CF_STUB_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), EGDBUS_FOLDER_TYPE_CF_STUB, EGdbusFolderCFStubClass))
#define EGDBUS_FOLDER_CF_STUB_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), EGDBUS_FOLDER_TYPE_CF_STUB, EGdbusFolderCFStubClass))
#define EGDBUS_FOLDER_IS_CF_STUB(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), EGDBUS_FOLDER_TYPE_CF_STUB))
#define EGDBUS_FOLDER_IS_CF_STUB_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), EGDBUS_FOLDER_TYPE_CF_STUB))

typedef struct _EGdbusFolderCFStub EGdbusFolderCFStub;
typedef struct _EGdbusFolderCFStubClass EGdbusFolderCFStubClass;
typedef struct _EGdbusFolderCFStubPrivate EGdbusFolderCFStubPrivate;

struct _EGdbusFolderCFStub
{
  GObject parent_instance;
  EGdbusFolderCFStubPrivate *priv;
};

struct _EGdbusFolderCFStubClass
{
  GObjectClass parent_class;
};

GType egdbus_folder_cf_stub_get_gtype (void) G_GNUC_CONST;

EGdbusFolderCF *egdbus_folder_cf_stub_new (void);


/* ---- */

#define EGDBUS_FOLDER_TYPE_PROXY_MANAGER (egdbus_folder_proxy_manager_get_gtype ())
#define EGDBUS_FOLDER_PROXY_MANAGER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), EGDBUS_FOLDER_TYPE_PROXY_MANAGER, EGdbusFolderProxyManager))
#define EGDBUS_FOLDER_PROXY_MANAGER_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), EGDBUS_FOLDER_TYPE_PROXY_MANAGER, EGdbusFolderProxyManagerClass))
#define EGDBUS_FOLDER_PROXY_MANAGER_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), EGDBUS_FOLDER_TYPE_PROXY_MANAGER, EGdbusFolderProxyManagerClass))
#define EGDBUS_FOLDER_IS_PROXY_MANAGER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), EGDBUS_FOLDER_TYPE_PROXY_MANAGER))
#define EGDBUS_FOLDER_IS_PROXY_MANAGER_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), EGDBUS_FOLDER_TYPE_PROXY_MANAGER))

typedef struct _EGdbusFolderProxyManager EGdbusFolderProxyManager;
typedef struct _EGdbusFolderProxyManagerClass EGdbusFolderProxyManagerClass;
typedef struct _EGdbusFolderProxyManagerPrivate EGdbusFolderProxyManagerPrivate;

struct _EGdbusFolderProxyManager
{
  GDBusProxyManager parent_instance;
  EGdbusFolderProxyManagerPrivate *priv;
};

struct _EGdbusFolderProxyManagerClass
{
  GDBusProxyManagerClass parent_class;
};

GType egdbus_folder_proxy_manager_get_gtype (void) G_GNUC_CONST;

GDBusProxyTypeFunc egdbus_folder_proxy_manager_get_proxy_type_func (void);

void egdbus_folder_proxy_manager_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GDBusProxyManager *egdbus_folder_proxy_manager_new_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusProxyManager *egdbus_folder_proxy_manager_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void egdbus_folder_proxy_manager_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GDBusProxyManager *egdbus_folder_proxy_manager_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusProxyManager *egdbus_folder_proxy_manager_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


G_END_DECLS

#endif /* __E_GDBUS_EMAILFOLDER_H__ */
